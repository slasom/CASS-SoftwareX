# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Execution(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, execution_name: str=None, project_name: str=None, timestamp_start_execution: int=None, timestamp_end_execution: int=None, execution_logs: str=None, associated_cost: float=None, execution_finished: int=None, execution_state: str=None):  # noqa: E501
        """Execution - a model defined in Swagger

        :param execution_name: The execution_name of this Execution.  # noqa: E501
        :type execution_name: str
        :param project_name: The project_name of this Execution.  # noqa: E501
        :type project_name: str
        :param timestamp_start_execution: The timestamp_start_execution of this Execution.  # noqa: E501
        :type timestamp_start_execution: int
        :param timestamp_end_execution: The timestamp_end_execution of this Execution.  # noqa: E501
        :type timestamp_end_execution: int
        :param execution_logs: The execution_logs of this Execution.  # noqa: E501
        :type execution_logs: str
        :param associated_cost: The associated_cost of this Execution.  # noqa: E501
        :type associated_cost: float
        :param execution_finished: The execution_finished of this Execution.  # noqa: E501
        :type execution_finished: int
        :param execution_state: The execution_state of this Execution.  # noqa: E501
        :type execution_state: str
        """
        self.swagger_types = {
            'execution_name': str,
            'project_name': str,
            'timestamp_start_execution': int,
            'timestamp_end_execution': int,
            'execution_logs': str,
            'associated_cost': float,
            'execution_finished': int,
            'execution_state': str
        }

        self.attribute_map = {
            'execution_name': 'execution_name',
            'project_name': 'project_name',
            'timestamp_start_execution': 'timestamp_start_execution',
            'timestamp_end_execution': 'timestamp_end_execution',
            'execution_logs': 'execution_logs',
            'associated_cost': 'associated_cost',
            'execution_finished': 'execution_finished',
            'execution_state': 'execution_state'
        }
        self._execution_name = execution_name
        self._project_name = project_name
        self._timestamp_start_execution = timestamp_start_execution
        self._timestamp_end_execution = timestamp_end_execution
        self._execution_logs = execution_logs
        self._associated_cost = associated_cost
        self._execution_finished = execution_finished
        self._execution_state = execution_state

    @classmethod
    def from_dict(cls, dikt) -> 'Execution':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Execution of this Execution.  # noqa: E501
        :rtype: Execution
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_name(self) -> str:
        """Gets the execution_name of this Execution.


        :return: The execution_name of this Execution.
        :rtype: str
        """
        return self._execution_name

    @execution_name.setter
    def execution_name(self, execution_name: str):
        """Sets the execution_name of this Execution.


        :param execution_name: The execution_name of this Execution.
        :type execution_name: str
        """

        self._execution_name = execution_name

    @property
    def project_name(self) -> str:
        """Gets the project_name of this Execution.


        :return: The project_name of this Execution.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name: str):
        """Sets the project_name of this Execution.


        :param project_name: The project_name of this Execution.
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def timestamp_start_execution(self) -> int:
        """Gets the timestamp_start_execution of this Execution.


        :return: The timestamp_start_execution of this Execution.
        :rtype: int
        """
        return self._timestamp_start_execution

    @timestamp_start_execution.setter
    def timestamp_start_execution(self, timestamp_start_execution: int):
        """Sets the timestamp_start_execution of this Execution.


        :param timestamp_start_execution: The timestamp_start_execution of this Execution.
        :type timestamp_start_execution: int
        """

        self._timestamp_start_execution = timestamp_start_execution

    @property
    def timestamp_end_execution(self) -> int:
        """Gets the timestamp_end_execution of this Execution.


        :return: The timestamp_end_execution of this Execution.
        :rtype: int
        """
        return self._timestamp_end_execution

    @timestamp_end_execution.setter
    def timestamp_end_execution(self, timestamp_end_execution: int):
        """Sets the timestamp_end_execution of this Execution.


        :param timestamp_end_execution: The timestamp_end_execution of this Execution.
        :type timestamp_end_execution: int
        """

        self._timestamp_end_execution = timestamp_end_execution

    @property
    def execution_logs(self) -> str:
        """Gets the execution_logs of this Execution.


        :return: The execution_logs of this Execution.
        :rtype: str
        """
        return self._execution_logs

    @execution_logs.setter
    def execution_logs(self, execution_logs: str):
        """Sets the execution_logs of this Execution.


        :param execution_logs: The execution_logs of this Execution.
        :type execution_logs: str
        """

        self._execution_logs = execution_logs

    @property
    def associated_cost(self) -> float:
        """Gets the associated_cost of this Execution.


        :return: The associated_cost of this Execution.
        :rtype: float
        """
        return self._associated_cost

    @associated_cost.setter
    def associated_cost(self, associated_cost: float):
        """Sets the associated_cost of this Execution.


        :param associated_cost: The associated_cost of this Execution.
        :type associated_cost: float
        """

        self._associated_cost = associated_cost

    @property
    def execution_finished(self) -> int:
        """Gets the execution_finished of this Execution.


        :return: The execution_finished of this Execution.
        :rtype: int
        """
        return self._execution_finished

    @execution_finished.setter
    def execution_finished(self, execution_finished: int):
        """Sets the execution_finished of this Execution.


        :param execution_finished: The execution_finished of this Execution.
        :type execution_finished: int
        """

        self._execution_finished = execution_finished

    @property
    def execution_state(self) -> str:
        """Gets the execution_state of this Execution.


        :return: The execution_state of this Execution.
        :rtype: str
        """
        return self._execution_state

    @execution_state.setter
    def execution_state(self, execution_state: str):
        """Sets the execution_state of this Execution.


        :param execution_state: The execution_state of this Execution.
        :type execution_state: str
        """

        self._execution_state = execution_state
